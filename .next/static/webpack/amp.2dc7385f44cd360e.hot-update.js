"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("amp",{

/***/ "./node_modules/next/dist/shared/lib/router/router.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/router.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.matchesMiddleware = matchesMiddleware;\nexports.createKey = createKey;\nexports[\"default\"] = void 0;\n\nvar _async_to_generator = (__webpack_require__(/*! @swc/helpers/lib/_async_to_generator.js */ \"./node_modules/@swc/helpers/lib/_async_to_generator.js\")[\"default\"]);\n\nvar _extends = (__webpack_require__(/*! @swc/helpers/lib/_extends.js */ \"./node_modules/@swc/helpers/lib/_extends.js\")[\"default\"]);\n\nvar _interop_require_default = (__webpack_require__(/*! @swc/helpers/lib/_interop_require_default.js */ \"./node_modules/@swc/helpers/lib/_interop_require_default.js\")[\"default\"]);\n\nvar _interop_require_wildcard = (__webpack_require__(/*! @swc/helpers/lib/_interop_require_wildcard.js */ \"./node_modules/@swc/helpers/lib/_interop_require_wildcard.js\")[\"default\"]);\n\nvar _removeTrailingSlash = __webpack_require__(/*! ./utils/remove-trailing-slash */ \"./node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js\");\n\nvar _routeLoader = __webpack_require__(/*! ../../../client/route-loader */ \"./node_modules/next/dist/client/route-loader.js\");\n\nvar _script = __webpack_require__(/*! ../../../client/script */ \"./node_modules/next/dist/client/script.js\");\n\nvar _isError = _interop_require_wildcard(__webpack_require__(/*! ../../../lib/is-error */ \"./node_modules/next/dist/lib/is-error.js\"));\n\nvar _denormalizePagePath = __webpack_require__(/*! ../page-path/denormalize-page-path */ \"./node_modules/next/dist/shared/lib/page-path/denormalize-page-path.js\");\n\nvar _normalizeLocalePath = __webpack_require__(/*! ../i18n/normalize-locale-path */ \"./node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js\");\n\nvar _mitt = _interop_require_default(__webpack_require__(/*! ../mitt */ \"./node_modules/next/dist/shared/lib/mitt.js\"));\n\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/next/dist/shared/lib/utils.js\");\n\nvar _isDynamic = __webpack_require__(/*! ./utils/is-dynamic */ \"./node_modules/next/dist/shared/lib/router/utils/is-dynamic.js\");\n\nvar _parseRelativeUrl = __webpack_require__(/*! ./utils/parse-relative-url */ \"./node_modules/next/dist/shared/lib/router/utils/parse-relative-url.js\");\n\nvar _resolveRewrites = _interop_require_default(__webpack_require__(/*! ./utils/resolve-rewrites */ \"?506d\"));\n\nvar _routeMatcher = __webpack_require__(/*! ./utils/route-matcher */ \"./node_modules/next/dist/shared/lib/router/utils/route-matcher.js\");\n\nvar _routeRegex = __webpack_require__(/*! ./utils/route-regex */ \"./node_modules/next/dist/shared/lib/router/utils/route-regex.js\");\n\nvar _formatUrl = __webpack_require__(/*! ./utils/format-url */ \"./node_modules/next/dist/shared/lib/router/utils/format-url.js\");\n\nvar _detectDomainLocale = __webpack_require__(/*! ../../../client/detect-domain-locale */ \"./node_modules/next/dist/client/detect-domain-locale.js\");\n\nvar _parsePath = __webpack_require__(/*! ./utils/parse-path */ \"./node_modules/next/dist/shared/lib/router/utils/parse-path.js\");\n\nvar _addLocale = __webpack_require__(/*! ../../../client/add-locale */ \"./node_modules/next/dist/client/add-locale.js\");\n\nvar _removeLocale = __webpack_require__(/*! ../../../client/remove-locale */ \"./node_modules/next/dist/client/remove-locale.js\");\n\nvar _removeBasePath = __webpack_require__(/*! ../../../client/remove-base-path */ \"./node_modules/next/dist/client/remove-base-path.js\");\n\nvar _addBasePath = __webpack_require__(/*! ../../../client/add-base-path */ \"./node_modules/next/dist/client/add-base-path.js\");\n\nvar _hasBasePath = __webpack_require__(/*! ../../../client/has-base-path */ \"./node_modules/next/dist/client/has-base-path.js\");\n\nvar _isApiRoute = __webpack_require__(/*! ../../../lib/is-api-route */ \"./node_modules/next/dist/lib/is-api-route.js\");\n\nvar _getNextPathnameInfo = __webpack_require__(/*! ./utils/get-next-pathname-info */ \"./node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js\");\n\nvar _formatNextPathnameInfo = __webpack_require__(/*! ./utils/format-next-pathname-info */ \"./node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js\");\n\nvar _compareStates = __webpack_require__(/*! ./utils/compare-states */ \"./node_modules/next/dist/shared/lib/router/utils/compare-states.js\");\n\nvar _isLocalUrl = __webpack_require__(/*! ./utils/is-local-url */ \"./node_modules/next/dist/shared/lib/router/utils/is-local-url.js\");\n\nvar _isBot = __webpack_require__(/*! ./utils/is-bot */ \"./node_modules/next/dist/shared/lib/router/utils/is-bot.js\");\n\nvar _omit = __webpack_require__(/*! ./utils/omit */ \"./node_modules/next/dist/shared/lib/router/utils/omit.js\");\n\nvar _resolveHref = __webpack_require__(/*! ./utils/resolve-href */ \"./node_modules/next/dist/shared/lib/router/utils/resolve-href.js\");\n\nvar _interpolateAs = __webpack_require__(/*! ./utils/interpolate-as */ \"./node_modules/next/dist/shared/lib/router/utils/interpolate-as.js\");\n\nvar _handleSmoothScroll = __webpack_require__(/*! ./utils/handle-smooth-scroll */ \"./node_modules/next/dist/shared/lib/router/utils/handle-smooth-scroll.js\");\n\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true\n  });\n}\n\nfunction matchesMiddleware(options) {\n  return _matchesMiddleware.apply(this, arguments);\n}\n\nfunction _matchesMiddleware() {\n  _matchesMiddleware = _async_to_generator(function* (options) {\n    const matchers = yield Promise.resolve(options.router.pageLoader.getMiddleware());\n    if (!matchers) return false;\n    const {\n      pathname: asPathname\n    } = (0, _parsePath).parsePath(options.asPath); // remove basePath first since path prefix has to be in the order of `/${basePath}/${locale}`\n\n    const cleanedAs = (0, _hasBasePath).hasBasePath(asPathname) ? (0, _removeBasePath).removeBasePath(asPathname) : asPathname;\n    const asWithBasePathAndLocale = (0, _addBasePath).addBasePath((0, _addLocale).addLocale(cleanedAs, options.locale)); // Check only path match on client. Matching \"has\" should be done on server\n    // where we can access more info such as headers, HttpOnly cookie, etc.\n\n    return matchers.some(m => new RegExp(m.regexp).test(asWithBasePathAndLocale));\n  });\n  return _matchesMiddleware.apply(this, arguments);\n}\n\nfunction stripOrigin(url) {\n  const origin = (0, _utils).getLocationOrigin();\n  return url.startsWith(origin) ? url.substring(origin.length) : url;\n}\n\nfunction prepareUrlAs(router, url, as) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  let [resolvedHref, resolvedAs] = (0, _resolveHref).resolveHref(router, url, true);\n  const origin = (0, _utils).getLocationOrigin();\n  const hrefWasAbsolute = resolvedHref.startsWith(origin);\n  const asWasAbsolute = resolvedAs && resolvedAs.startsWith(origin);\n  resolvedHref = stripOrigin(resolvedHref);\n  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;\n  const preparedUrl = hrefWasAbsolute ? resolvedHref : (0, _addBasePath).addBasePath(resolvedHref);\n  const preparedAs = as ? stripOrigin((0, _resolveHref).resolveHref(router, as)) : resolvedAs || resolvedHref;\n  return {\n    url: preparedUrl,\n    as: asWasAbsolute ? preparedAs : (0, _addBasePath).addBasePath(preparedAs)\n  };\n}\n\nfunction resolveDynamicRoute(pathname, pages) {\n  const cleanPathname = (0, _removeTrailingSlash).removeTrailingSlash((0, _denormalizePagePath).denormalizePagePath(pathname));\n\n  if (cleanPathname === '/404' || cleanPathname === '/_error') {\n    return pathname;\n  } // handle resolving href for dynamic routes\n\n\n  if (!pages.includes(cleanPathname)) {\n    // eslint-disable-next-line array-callback-return\n    pages.some(page => {\n      if ((0, _isDynamic).isDynamicRoute(page) && (0, _routeRegex).getRouteRegex(page).re.test(cleanPathname)) {\n        pathname = page;\n        return true;\n      }\n    });\n  }\n\n  return (0, _removeTrailingSlash).removeTrailingSlash(pathname);\n}\n\nfunction getMiddlewareData(source, response, options) {\n  const nextConfig = {\n    basePath: options.router.basePath,\n    i18n: {\n      locales: options.router.locales\n    },\n    trailingSlash: Boolean(false)\n  };\n  const rewriteHeader = response.headers.get('x-nextjs-rewrite');\n  let rewriteTarget = rewriteHeader || response.headers.get('x-nextjs-matched-path');\n  const matchedPath = response.headers.get('x-matched-path');\n\n  if (matchedPath && !rewriteTarget && !matchedPath.includes('__next_data_catchall') && !matchedPath.includes('/_error') && !matchedPath.includes('/404')) {\n    // leverage x-matched-path to detect next.config.js rewrites\n    rewriteTarget = matchedPath;\n  }\n\n  if (rewriteTarget) {\n    if (rewriteTarget.startsWith('/') || undefined) {\n      const parsedRewriteTarget = (0, _parseRelativeUrl).parseRelativeUrl(rewriteTarget);\n      const pathnameInfo = (0, _getNextPathnameInfo).getNextPathnameInfo(parsedRewriteTarget.pathname, {\n        nextConfig,\n        parseData: true\n      });\n      let fsPathname = (0, _removeTrailingSlash).removeTrailingSlash(pathnameInfo.pathname);\n      return Promise.all([options.router.pageLoader.getPageList(), (0, _routeLoader).getClientBuildManifest()]).then(_ref => {\n        let [pages, {\n          __rewrites: rewrites\n        }] = _ref;\n        let as = (0, _addLocale).addLocale(pathnameInfo.pathname, pathnameInfo.locale);\n\n        if ((0, _isDynamic).isDynamicRoute(as) || !rewriteHeader && pages.includes((0, _normalizeLocalePath).normalizeLocalePath((0, _removeBasePath).removeBasePath(as), options.router.locales).pathname)) {\n          const parsedSource = (0, _getNextPathnameInfo).getNextPathnameInfo((0, _parseRelativeUrl).parseRelativeUrl(source).pathname, {\n            parseData: true\n          });\n          as = (0, _addBasePath).addBasePath(parsedSource.pathname);\n          parsedRewriteTarget.pathname = as;\n        }\n\n        if (false) {} else if (!pages.includes(fsPathname)) {\n          const resolvedPathname = resolveDynamicRoute(fsPathname, pages);\n\n          if (resolvedPathname !== fsPathname) {\n            fsPathname = resolvedPathname;\n          }\n        }\n\n        const resolvedHref = !pages.includes(fsPathname) ? resolveDynamicRoute((0, _normalizeLocalePath).normalizeLocalePath((0, _removeBasePath).removeBasePath(parsedRewriteTarget.pathname), options.router.locales).pathname, pages) : fsPathname;\n\n        if ((0, _isDynamic).isDynamicRoute(resolvedHref)) {\n          const matches = (0, _routeMatcher).getRouteMatcher((0, _routeRegex).getRouteRegex(resolvedHref))(as);\n          Object.assign(parsedRewriteTarget.query, matches || {});\n        }\n\n        return {\n          type: 'rewrite',\n          parsedAs: parsedRewriteTarget,\n          resolvedHref\n        };\n      });\n    }\n\n    const src = (0, _parsePath).parsePath(source);\n    const pathname = (0, _formatNextPathnameInfo).formatNextPathnameInfo(_extends({}, (0, _getNextPathnameInfo).getNextPathnameInfo(src.pathname, {\n      nextConfig,\n      parseData: true\n    }), {\n      defaultLocale: options.router.defaultLocale,\n      buildId: ''\n    }));\n    return Promise.resolve({\n      type: 'redirect-external',\n      destination: `${pathname}${src.query}${src.hash}`\n    });\n  }\n\n  const redirectTarget = response.headers.get('x-nextjs-redirect');\n\n  if (redirectTarget) {\n    if (redirectTarget.startsWith('/')) {\n      const src = (0, _parsePath).parsePath(redirectTarget);\n      const pathname = (0, _formatNextPathnameInfo).formatNextPathnameInfo(_extends({}, (0, _getNextPathnameInfo).getNextPathnameInfo(src.pathname, {\n        nextConfig,\n        parseData: true\n      }), {\n        defaultLocale: options.router.defaultLocale,\n        buildId: ''\n      }));\n      return Promise.resolve({\n        type: 'redirect-internal',\n        newAs: `${pathname}${src.query}${src.hash}`,\n        newUrl: `${pathname}${src.query}${src.hash}`\n      });\n    }\n\n    return Promise.resolve({\n      type: 'redirect-external',\n      destination: redirectTarget\n    });\n  }\n\n  return Promise.resolve({\n    type: 'next'\n  });\n}\n\nfunction withMiddlewareEffects(options) {\n  return _withMiddlewareEffects.apply(this, arguments);\n}\n\nfunction _withMiddlewareEffects() {\n  _withMiddlewareEffects = _async_to_generator(function* (options) {\n    const matches = yield matchesMiddleware(options);\n\n    if (!matches || !options.fetchData) {\n      return null;\n    }\n\n    try {\n      const data = yield options.fetchData();\n      const effect = yield getMiddlewareData(data.dataHref, data.response, options);\n      return {\n        dataHref: data.dataHref,\n        json: data.json,\n        response: data.response,\n        text: data.text,\n        cacheKey: data.cacheKey,\n        effect\n      };\n    } catch (e) {\n      /**\n      * TODO: Revisit this in the future.\n      * For now we will not consider middleware data errors to be fatal.\n      * maybe we should revisit in the future.\n      */\n      return null;\n    }\n  });\n  return _withMiddlewareEffects.apply(this, arguments);\n}\n\nconst manualScrollRestoration =  false && 0;\nconst SSG_DATA_NOT_FOUND = Symbol('SSG_DATA_NOT_FOUND');\n\nfunction fetchRetry(url, attempts, options) {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` won’t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin',\n    method: options.method || 'GET',\n    headers: Object.assign({}, options.headers, {\n      'x-nextjs-data': '1'\n    })\n  }).then(response => {\n    return !response.ok && attempts > 1 && response.status >= 500 ? fetchRetry(url, attempts - 1, options) : response;\n  });\n}\n\nfunction tryToParseAsJSON(text) {\n  try {\n    return JSON.parse(text);\n  } catch (error) {\n    return null;\n  }\n}\n\nfunction fetchNextData(_ref2) {\n  let {\n    dataHref,\n    inflightCache,\n    isPrefetch,\n    hasMiddleware,\n    isServerRender,\n    parseJSON,\n    persistCache,\n    isBackground,\n    unstable_skipClientCache\n  } = _ref2;\n  const {\n    href: cacheKey\n  } = new URL(dataHref, window.location.href);\n  var ref1;\n\n  const getData = params => {\n    return fetchRetry(dataHref, isServerRender ? 3 : 1, {\n      headers: Object.assign({}, isPrefetch ? {\n        purpose: 'prefetch'\n      } : {}, isPrefetch && hasMiddleware ? {\n        'x-middleware-prefetch': '1'\n      } : {}),\n      method: (ref1 = params == null ? void 0 : params.method) != null ? ref1 : 'GET'\n    }).then(response => {\n      if (response.ok && (params == null ? void 0 : params.method) === 'HEAD') {\n        return {\n          dataHref,\n          response,\n          text: '',\n          json: {},\n          cacheKey\n        };\n      }\n\n      return response.text().then(text => {\n        if (!response.ok) {\n          /**\n          * When the data response is a redirect because of a middleware\n          * we do not consider it an error. The headers must bring the\n          * mapped location.\n          * TODO: Change the status code in the handler.\n          */\n          if (hasMiddleware && [301, 302, 307, 308].includes(response.status)) {\n            return {\n              dataHref,\n              response,\n              text,\n              json: {},\n              cacheKey\n            };\n          }\n\n          if (response.status === 404) {\n            var ref;\n\n            if ((ref = tryToParseAsJSON(text)) == null ? void 0 : ref.notFound) {\n              return {\n                dataHref,\n                json: {\n                  notFound: SSG_DATA_NOT_FOUND\n                },\n                response,\n                text,\n                cacheKey\n              };\n            }\n          }\n\n          const error = new Error(`Failed to load static props`);\n          /**\n          * We should only trigger a server-side transition if this was\n          * caused on a client-side transition. Otherwise, we'd get into\n          * an infinite loop.\n          */\n\n          if (!isServerRender) {\n            (0, _routeLoader).markAssetError(error);\n          }\n\n          throw error;\n        }\n\n        return {\n          dataHref,\n          json: parseJSON ? tryToParseAsJSON(text) : null,\n          response,\n          text,\n          cacheKey\n        };\n      });\n    }).then(data => {\n      if (!persistCache || true || 0) {\n        delete inflightCache[cacheKey];\n      }\n\n      return data;\n    }).catch(err => {\n      if (!unstable_skipClientCache) {\n        delete inflightCache[cacheKey];\n      }\n\n      if ( // chrome\n      err.message === 'Failed to fetch' || // firefox\n      err.message === 'NetworkError when attempting to fetch resource.' || // safari\n      err.message === 'Load failed') {\n        (0, _routeLoader).markAssetError(err);\n      }\n\n      throw err;\n    });\n  }; // when skipping client cache we wait to update\n  // inflight cache until successful data response\n  // this allows racing click event with fetching newer data\n  // without blocking navigation when stale data is available\n\n\n  if (unstable_skipClientCache && persistCache) {\n    return getData({}).then(data => {\n      inflightCache[cacheKey] = Promise.resolve(data);\n      return data;\n    });\n  }\n\n  if (inflightCache[cacheKey] !== undefined) {\n    return inflightCache[cacheKey];\n  }\n\n  return inflightCache[cacheKey] = getData(isBackground ? {\n    method: 'HEAD'\n  } : {});\n}\n\nfunction createKey() {\n  return Math.random().toString(36).slice(2, 10);\n}\n\nfunction handleHardNavigation(_ref3) {\n  let {\n    url,\n    router\n  } = _ref3;\n\n  // ensure we don't trigger a hard navigation to the same\n  // URL as this can end up with an infinite refresh\n  if (url === (0, _addBasePath).addBasePath((0, _addLocale).addLocale(router.asPath, router.locale))) {\n    throw new Error(`Invariant: attempted to hard navigate to the same URL ${url} ${location.href}`);\n  }\n\n  window.location.href = url;\n}\n\nconst getCancelledHandler = _ref4 => {\n  let {\n    route,\n    router\n  } = _ref4;\n  let cancelled = false;\n\n  const cancel = router.clc = () => {\n    cancelled = true;\n  };\n\n  const handleCancelled = () => {\n    if (cancelled) {\n      const error = new Error(`Abort fetching component for route: \"${route}\"`);\n      error.cancelled = true;\n      throw error;\n    }\n\n    if (cancel === router.clc) {\n      router.clc = null;\n    }\n  };\n\n  return handleCancelled;\n};\n\nclass Router {\n  reload() {\n    window.location.reload();\n  }\n  /**\n  * Go back in history\n  */\n\n\n  back() {\n    window.history.back();\n  }\n  /**\n  * Go forward in history\n  */\n\n\n  forward() {\n    window.history.forward();\n  }\n  /**\n  * Performs a `pushState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n\n\n  push(url, as) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (false) {}\n\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('pushState', url, as, options);\n  }\n  /**\n  * Performs a `replaceState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n\n\n  replace(url, as) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('replaceState', url, as, options);\n  }\n\n  _bfl(as, resolvedAs, locale, skipNavigate) {\n    var _this = this;\n\n    return _async_to_generator(function* () {\n      if (true) {\n        let matchesBflStatic = false;\n        let matchesBflDynamic = false;\n\n        for (const curAs of [as, resolvedAs]) {\n          if (curAs) {\n            const asNoSlash = (0, _removeTrailingSlash).removeTrailingSlash(new URL(curAs, 'http://n').pathname);\n            const asNoSlashLocale = (0, _addBasePath).addBasePath((0, _addLocale).addLocale(asNoSlash, locale || _this.locale));\n\n            if (asNoSlash !== (0, _removeTrailingSlash).removeTrailingSlash(new URL(_this.asPath, 'http://n').pathname)) {\n              var ref, ref2;\n              matchesBflStatic = matchesBflStatic || !!((ref = _this._bfl_s) == null ? void 0 : ref.has(asNoSlash)) || !!((ref2 = _this._bfl_s) == null ? void 0 : ref2.has(asNoSlashLocale));\n\n              for (const normalizedAS of [asNoSlash, asNoSlashLocale]) {\n                // if any sub-path of as matches a dynamic filter path\n                // it should be hard navigated\n                const curAsParts = normalizedAS.split('/');\n\n                for (let i = 0; !matchesBflDynamic && i < curAsParts.length + 1; i++) {\n                  var ref3;\n                  const currentPart = curAsParts.slice(0, i).join('/');\n\n                  if (currentPart && ((ref3 = _this._bfl_d) == null ? void 0 : ref3.has(currentPart))) {\n                    matchesBflDynamic = true;\n                    break;\n                  }\n                }\n              } // if the client router filter is matched then we trigger\n              // a hard navigation\n\n\n              if (matchesBflStatic || matchesBflDynamic) {\n                if (skipNavigate) {\n                  return true;\n                }\n\n                handleHardNavigation({\n                  url: (0, _addBasePath).addBasePath((0, _addLocale).addLocale(as, locale || _this.locale, _this.defaultLocale)),\n                  router: _this\n                });\n                return new Promise(() => {});\n              }\n            }\n          }\n        }\n      }\n\n      return false;\n    })();\n  }\n\n  change(method, url, as, options, forcedScroll) {\n    var _this = this;\n\n    return _async_to_generator(function* () {\n      var ref;\n\n      if (!(0, _isLocalUrl).isLocalURL(url)) {\n        handleHardNavigation({\n          url,\n          router: _this\n        });\n        return false;\n      } // WARNING: `_h` is an internal option for handing Next.js client-side\n      // hydration. Your app should _never_ use this property. It may change at\n      // any time without notice.\n\n\n      const isQueryUpdating = options._h === 1;\n\n      if (!isQueryUpdating && !options.shallow) {\n        yield _this._bfl(as, undefined, options.locale);\n      }\n\n      let shouldResolveHref = isQueryUpdating || options._shouldResolveHref || (0, _parsePath).parsePath(url).pathname === (0, _parsePath).parsePath(as).pathname;\n\n      const nextState = _extends({}, _this.state); // for static pages with query params in the URL we delay\n      // marking the router ready until after the query is updated\n      // or a navigation has occurred\n\n\n      const readyStateChange = _this.isReady !== true;\n      _this.isReady = true;\n      const isSsr = _this.isSsr;\n\n      if (!isQueryUpdating) {\n        _this.isSsr = false;\n      } // if a route transition is already in progress before\n      // the query updating is triggered ignore query updating\n\n\n      if (isQueryUpdating && _this.clc) {\n        return false;\n      }\n\n      const prevLocale = nextState.locale;\n\n      if (false) { var ref4; } // marking route changes as a navigation start entry\n\n\n      if (_utils.ST) {\n        performance.mark('routeChange');\n      }\n\n      const {\n        shallow = false,\n        scroll = true\n      } = options;\n      const routeProps = {\n        shallow\n      };\n\n      if (_this._inFlightRoute && _this.clc) {\n        if (!isSsr) {\n          Router.events.emit('routeChangeError', buildCancellationError(), _this._inFlightRoute, routeProps);\n        }\n\n        _this.clc();\n\n        _this.clc = null;\n      }\n\n      as = (0, _addBasePath).addBasePath((0, _addLocale).addLocale((0, _hasBasePath).hasBasePath(as) ? (0, _removeBasePath).removeBasePath(as) : as, options.locale, _this.defaultLocale));\n      const cleanedAs = (0, _removeLocale).removeLocale((0, _hasBasePath).hasBasePath(as) ? (0, _removeBasePath).removeBasePath(as) : as, nextState.locale);\n      _this._inFlightRoute = as;\n      const localeChange = prevLocale !== nextState.locale; // If the url change is only related to a hash change\n      // We should not proceed. We should only change the state.\n\n      if (!isQueryUpdating && _this.onlyAHashChange(cleanedAs) && !localeChange) {\n        nextState.asPath = cleanedAs;\n        Router.events.emit('hashChangeStart', as, routeProps); // TODO: do we need the resolved href when only a hash change?\n\n        _this.changeState(method, url, as, _extends({}, options, {\n          scroll: false\n        }));\n\n        if (scroll) {\n          _this.scrollToHash(cleanedAs);\n        }\n\n        try {\n          yield _this.set(nextState, _this.components[nextState.route], null);\n        } catch (err) {\n          if ((0, _isError).default(err) && err.cancelled) {\n            Router.events.emit('routeChangeError', err, cleanedAs, routeProps);\n          }\n\n          throw err;\n        }\n\n        Router.events.emit('hashChangeComplete', as, routeProps);\n        return true;\n      }\n\n      let parsed = (0, _parseRelativeUrl).parseRelativeUrl(url);\n      let {\n        pathname,\n        query\n      } = parsed; // if we detected the path as app route during prefetching\n      // trigger hard navigation\n\n      if ((ref = _this.components[pathname]) == null ? void 0 : ref.__appRouter) {\n        handleHardNavigation({\n          url: as,\n          router: _this\n        });\n        return new Promise(() => {});\n      } // The build manifest needs to be loaded before auto-static dynamic pages\n      // get their query parameters to allow ensuring they can be parsed properly\n      // when rewritten to\n\n\n      let pages, rewrites;\n\n      try {\n        [pages, {\n          __rewrites: rewrites\n        }] = yield Promise.all([_this.pageLoader.getPageList(), (0, _routeLoader).getClientBuildManifest(), _this.pageLoader.getMiddleware()]);\n      } catch (err) {\n        // If we fail to resolve the page list or client-build manifest, we must\n        // do a server-side transition:\n        handleHardNavigation({\n          url: as,\n          router: _this\n        });\n        return false;\n      } // If asked to change the current URL we should reload the current page\n      // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n      // We also need to set the method = replaceState always\n      // as this should not go into the history (That's how browsers work)\n      // We should compare the new asPath to the current asPath, not the url\n\n\n      if (!_this.urlIsNew(cleanedAs) && !localeChange) {\n        method = 'replaceState';\n      } // we need to resolve the as value using rewrites for dynamic SSG\n      // pages to allow building the data URL correctly\n\n\n      let resolvedAs = as; // url and as should always be prefixed with basePath by this\n      // point by either next/link or router.push/replace so strip the\n      // basePath from the pathname to match the pages dir 1-to-1\n\n      pathname = pathname ? (0, _removeTrailingSlash).removeTrailingSlash((0, _removeBasePath).removeBasePath(pathname)) : pathname;\n      let route = (0, _removeTrailingSlash).removeTrailingSlash(pathname);\n      const parsedAsPathname = as.startsWith('/') && (0, _parseRelativeUrl).parseRelativeUrl(as).pathname;\n      const isMiddlewareRewrite = !!(parsedAsPathname && route !== parsedAsPathname && (!(0, _isDynamic).isDynamicRoute(route) || !(0, _routeMatcher).getRouteMatcher((0, _routeRegex).getRouteRegex(route))(parsedAsPathname))); // we don't attempt resolve asPath when we need to execute\n      // middleware as the resolving will occur server-side\n\n      const isMiddlewareMatch = !options.shallow && (yield matchesMiddleware({\n        asPath: as,\n        locale: nextState.locale,\n        router: _this\n      }));\n\n      if (isQueryUpdating && isMiddlewareMatch) {\n        shouldResolveHref = false;\n      }\n\n      if (shouldResolveHref && pathname !== '/_error') {\n        options._shouldResolveHref = true;\n\n        if (false) {} else {\n          parsed.pathname = resolveDynamicRoute(pathname, pages);\n\n          if (parsed.pathname !== pathname) {\n            pathname = parsed.pathname;\n            parsed.pathname = (0, _addBasePath).addBasePath(pathname);\n\n            if (!isMiddlewareMatch) {\n              url = (0, _formatUrl).formatWithValidation(parsed);\n            }\n          }\n        }\n      }\n\n      if (!(0, _isLocalUrl).isLocalURL(as)) {\n        if (true) {\n          throw new Error(`Invalid href: \"${url}\" and as: \"${as}\", received relative href and external as` + `\\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as`);\n        }\n\n        handleHardNavigation({\n          url: as,\n          router: _this\n        });\n        return false;\n      }\n\n      resolvedAs = (0, _removeLocale).removeLocale((0, _removeBasePath).removeBasePath(resolvedAs), nextState.locale);\n      route = (0, _removeTrailingSlash).removeTrailingSlash(pathname);\n      let routeMatch = false;\n\n      if ((0, _isDynamic).isDynamicRoute(route)) {\n        const parsedAs = (0, _parseRelativeUrl).parseRelativeUrl(resolvedAs);\n        const asPathname = parsedAs.pathname;\n        const routeRegex = (0, _routeRegex).getRouteRegex(route);\n        routeMatch = (0, _routeMatcher).getRouteMatcher(routeRegex)(asPathname);\n        const shouldInterpolate = route === asPathname;\n        const interpolatedAs = shouldInterpolate ? (0, _interpolateAs).interpolateAs(route, asPathname, query) : {};\n\n        if (!routeMatch || shouldInterpolate && !interpolatedAs.result) {\n          const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param] && !routeRegex.groups[param].optional);\n\n          if (missingParams.length > 0 && !isMiddlewareMatch) {\n            if (true) {\n              console.warn(`${shouldInterpolate ? `Interpolating href` : `Mismatching \\`as\\` and \\`href\\``} failed to manually provide ` + `the params: ${missingParams.join(', ')} in the \\`href\\`'s \\`query\\``);\n            }\n\n            throw new Error((shouldInterpolate ? `The provided \\`href\\` (${url}) value is missing query values (${missingParams.join(', ')}) to be interpolated properly. ` : `The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). `) + `Read more: https://nextjs.org/docs/messages/${shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as'}`);\n          }\n        } else if (shouldInterpolate) {\n          as = (0, _formatUrl).formatWithValidation(Object.assign({}, parsedAs, {\n            pathname: interpolatedAs.result,\n            query: (0, _omit).omit(query, interpolatedAs.params)\n          }));\n        } else {\n          // Merge params into `query`, overwriting any specified in search\n          Object.assign(query, routeMatch);\n        }\n      }\n\n      if (!isQueryUpdating) {\n        Router.events.emit('routeChangeStart', as, routeProps);\n      }\n\n      const isErrorRoute = _this.pathname === '/404' || _this.pathname === '/_error';\n\n      try {\n        var ref5, ref6, ref7;\n        let routeInfo = yield _this.getRouteInfo({\n          route,\n          pathname,\n          query,\n          as,\n          resolvedAs,\n          routeProps,\n          locale: nextState.locale,\n          isPreview: nextState.isPreview,\n          hasMiddleware: isMiddlewareMatch,\n          unstable_skipClientCache: options.unstable_skipClientCache,\n          isQueryUpdating: isQueryUpdating && !_this.isFallback,\n          isMiddlewareRewrite\n        });\n\n        if (!isQueryUpdating && !options.shallow) {\n          yield _this._bfl(as, 'resolvedAs' in routeInfo ? routeInfo.resolvedAs : undefined, nextState.locale);\n        }\n\n        if ('route' in routeInfo && isMiddlewareMatch) {\n          pathname = routeInfo.route || route;\n          route = pathname;\n\n          if (!routeProps.shallow) {\n            query = Object.assign({}, routeInfo.query || {}, query);\n          }\n\n          const cleanedParsedPathname = (0, _hasBasePath).hasBasePath(parsed.pathname) ? (0, _removeBasePath).removeBasePath(parsed.pathname) : parsed.pathname;\n\n          if (routeMatch && pathname !== cleanedParsedPathname) {\n            Object.keys(routeMatch).forEach(key => {\n              if (routeMatch && query[key] === routeMatch[key]) {\n                delete query[key];\n              }\n            });\n          }\n\n          if ((0, _isDynamic).isDynamicRoute(pathname)) {\n            const prefixedAs = !routeProps.shallow && routeInfo.resolvedAs ? routeInfo.resolvedAs : (0, _addBasePath).addBasePath((0, _addLocale).addLocale(new URL(as, location.href).pathname, nextState.locale), true);\n            let rewriteAs = prefixedAs;\n\n            if ((0, _hasBasePath).hasBasePath(rewriteAs)) {\n              rewriteAs = (0, _removeBasePath).removeBasePath(rewriteAs);\n            }\n\n            if (false) {}\n\n            const routeRegex = (0, _routeRegex).getRouteRegex(pathname);\n            const curRouteMatch = (0, _routeMatcher).getRouteMatcher(routeRegex)(new URL(rewriteAs, location.href).pathname);\n\n            if (curRouteMatch) {\n              Object.assign(query, curRouteMatch);\n            }\n          }\n        } // If the routeInfo brings a redirect we simply apply it.\n\n\n        if ('type' in routeInfo) {\n          if (routeInfo.type === 'redirect-internal') {\n            return _this.change(method, routeInfo.newUrl, routeInfo.newAs, options);\n          } else {\n            handleHardNavigation({\n              url: routeInfo.destination,\n              router: _this\n            });\n            return new Promise(() => {});\n          }\n        }\n\n        const component = routeInfo.Component;\n\n        if (component && component.unstable_scriptLoader) {\n          const scripts = [].concat(component.unstable_scriptLoader());\n          scripts.forEach(script => {\n            (0, _script).handleClientScriptLoad(script.props);\n          });\n        } // handle redirect on client-transition\n\n\n        if ((routeInfo.__N_SSG || routeInfo.__N_SSP) && routeInfo.props) {\n          if (routeInfo.props.pageProps && routeInfo.props.pageProps.__N_REDIRECT) {\n            // Use the destination from redirect without adding locale\n            options.locale = false;\n            const destination = routeInfo.props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt\n            // client-navigation if it is falling back to hard navigation if\n            // it's not\n\n            if (destination.startsWith('/') && routeInfo.props.pageProps.__N_REDIRECT_BASE_PATH !== false) {\n              const parsedHref = (0, _parseRelativeUrl).parseRelativeUrl(destination);\n              parsedHref.pathname = resolveDynamicRoute(parsedHref.pathname, pages);\n              const {\n                url: newUrl,\n                as: newAs\n              } = prepareUrlAs(_this, destination, destination);\n              return _this.change(method, newUrl, newAs, options);\n            }\n\n            handleHardNavigation({\n              url: destination,\n              router: _this\n            });\n            return new Promise(() => {});\n          }\n\n          nextState.isPreview = !!routeInfo.props.__N_PREVIEW; // handle SSG data 404\n\n          if (routeInfo.props.notFound === SSG_DATA_NOT_FOUND) {\n            let notFoundRoute;\n\n            try {\n              yield _this.fetchComponent('/404');\n              notFoundRoute = '/404';\n            } catch (_) {\n              notFoundRoute = '/_error';\n            }\n\n            routeInfo = yield _this.getRouteInfo({\n              route: notFoundRoute,\n              pathname: notFoundRoute,\n              query,\n              as,\n              resolvedAs,\n              routeProps: {\n                shallow: false\n              },\n              locale: nextState.locale,\n              isPreview: nextState.isPreview,\n              isNotFound: true\n            });\n\n            if ('type' in routeInfo) {\n              throw new Error(`Unexpected middleware effect on /404`);\n            }\n          }\n        }\n\n        if (isQueryUpdating && _this.pathname === '/_error' && ((ref5 = self.__NEXT_DATA__.props) == null ? void 0 : (ref6 = ref5.pageProps) == null ? void 0 : ref6.statusCode) === 500 && ((ref7 = routeInfo.props) == null ? void 0 : ref7.pageProps)) {\n          // ensure statusCode is still correct for static 500 page\n          // when updating query information\n          routeInfo.props.pageProps.statusCode = 500;\n        }\n\n        var _route; // shallow routing is only allowed for same page URL changes.\n\n\n        const isValidShallowRoute = options.shallow && nextState.route === ((_route = routeInfo.route) != null ? _route : route);\n\n        var _scroll;\n\n        const shouldScroll = (_scroll = options.scroll) != null ? _scroll : !isQueryUpdating && !isValidShallowRoute;\n        const resetScroll = shouldScroll ? {\n          x: 0,\n          y: 0\n        } : null;\n        const upcomingScrollState = forcedScroll != null ? forcedScroll : resetScroll; // the new state that the router gonna set\n\n        const upcomingRouterState = _extends({}, nextState, {\n          route,\n          pathname,\n          query,\n          asPath: cleanedAs,\n          isFallback: false\n        }); // When the page being rendered is the 404 page, we should only update the\n        // query parameters. Route changes here might add the basePath when it\n        // wasn't originally present. This is also why this block is before the\n        // below `changeState` call which updates the browser's history (changing\n        // the URL).\n\n\n        if (isQueryUpdating && isErrorRoute) {\n          var ref8, ref9, ref10;\n          routeInfo = yield _this.getRouteInfo({\n            route: _this.pathname,\n            pathname: _this.pathname,\n            query,\n            as,\n            resolvedAs,\n            routeProps: {\n              shallow: false\n            },\n            locale: nextState.locale,\n            isPreview: nextState.isPreview,\n            isQueryUpdating: isQueryUpdating && !_this.isFallback\n          });\n\n          if ('type' in routeInfo) {\n            throw new Error(`Unexpected middleware effect on ${_this.pathname}`);\n          }\n\n          if (_this.pathname === '/_error' && ((ref8 = self.__NEXT_DATA__.props) == null ? void 0 : (ref9 = ref8.pageProps) == null ? void 0 : ref9.statusCode) === 500 && ((ref10 = routeInfo.props) == null ? void 0 : ref10.pageProps)) {\n            // ensure statusCode is still correct for static 500 page\n            // when updating query information\n            routeInfo.props.pageProps.statusCode = 500;\n          }\n\n          try {\n            yield _this.set(upcomingRouterState, routeInfo, upcomingScrollState);\n          } catch (err) {\n            if ((0, _isError).default(err) && err.cancelled) {\n              Router.events.emit('routeChangeError', err, cleanedAs, routeProps);\n            }\n\n            throw err;\n          }\n\n          return true;\n        }\n\n        Router.events.emit('beforeHistoryChange', as, routeProps);\n\n        _this.changeState(method, url, as, options); // for query updates we can skip it if the state is unchanged and we don't\n        // need to scroll\n        // https://github.com/vercel/next.js/issues/37139\n\n\n        const canSkipUpdating = isQueryUpdating && !upcomingScrollState && !readyStateChange && !localeChange && (0, _compareStates).compareRouterStates(upcomingRouterState, _this.state);\n\n        if (!canSkipUpdating) {\n          try {\n            yield _this.set(upcomingRouterState, routeInfo, upcomingScrollState);\n          } catch (e) {\n            if (e.cancelled) routeInfo.error = routeInfo.error || e;else throw e;\n          }\n\n          if (routeInfo.error) {\n            if (!isQueryUpdating) {\n              Router.events.emit('routeChangeError', routeInfo.error, cleanedAs, routeProps);\n            }\n\n            throw routeInfo.error;\n          }\n\n          if (false) {}\n\n          if (!isQueryUpdating) {\n            Router.events.emit('routeChangeComplete', as, routeProps);\n          } // A hash mark # is the optional last part of a URL\n\n\n          const hashRegex = /#.+$/;\n\n          if (shouldScroll && hashRegex.test(as)) {\n            _this.scrollToHash(as);\n          }\n        }\n\n        return true;\n      } catch (err1) {\n        if ((0, _isError).default(err1) && err1.cancelled) {\n          return false;\n        }\n\n        throw err1;\n      }\n    })();\n  }\n\n  changeState(method, url, as) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    if (true) {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`);\n        return;\n      }\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`);\n        return;\n      }\n    }\n\n    if (method !== 'pushState' || (0, _utils).getURL() !== as) {\n      this._shallow = options.shallow;\n      window.history[method]({\n        url,\n        as,\n        options,\n        __N: true,\n        key: this._key = method !== 'pushState' ? this._key : createKey()\n      }, // Most browsers currently ignores this parameter, although they may use it in the future.\n      // Passing the empty string here should be safe against future changes to the method.\n      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n      '', as);\n    }\n  }\n\n  handleRouteInfoError(err, pathname, query, as, routeProps, loadErrorFail) {\n    var _this = this;\n\n    return _async_to_generator(function* () {\n      console.error(err);\n\n      if (err.cancelled) {\n        // bubble up cancellation errors\n        throw err;\n      }\n\n      if ((0, _routeLoader).isAssetError(err) || loadErrorFail) {\n        Router.events.emit('routeChangeError', err, as, routeProps); // If we can't load the page it could be one of following reasons\n        //  1. Page doesn't exists\n        //  2. Page does exist in a different zone\n        //  3. Internal error while loading the page\n        // So, doing a hard reload is the proper way to deal with this.\n\n        handleHardNavigation({\n          url: as,\n          router: _this\n        }); // Changing the URL doesn't block executing the current code path.\n        // So let's throw a cancellation error stop the routing logic.\n\n        throw buildCancellationError();\n      }\n\n      try {\n        let props;\n        const {\n          page: Component,\n          styleSheets\n        } = yield _this.fetchComponent('/_error');\n        const routeInfo = {\n          props,\n          Component,\n          styleSheets,\n          err,\n          error: err\n        };\n\n        if (!routeInfo.props) {\n          try {\n            routeInfo.props = yield _this.getInitialProps(Component, {\n              err,\n              pathname,\n              query\n            });\n          } catch (gipErr) {\n            console.error('Error in error page `getInitialProps`: ', gipErr);\n            routeInfo.props = {};\n          }\n        }\n\n        return routeInfo;\n      } catch (routeInfoErr) {\n        return _this.handleRouteInfoError((0, _isError).default(routeInfoErr) ? routeInfoErr : new Error(routeInfoErr + ''), pathname, query, as, routeProps, true);\n      }\n    })();\n  }\n\n  getRouteInfo(_ref5) {\n    let {\n      route: requestedRoute,\n      pathname,\n      query,\n      as,\n      resolvedAs,\n      routeProps,\n      locale,\n      hasMiddleware,\n      isPreview,\n      unstable_skipClientCache,\n      isQueryUpdating,\n      isMiddlewareRewrite,\n      isNotFound\n    } = _ref5;\n\n    var _this = this;\n\n    return _async_to_generator(function* () {\n      /**\n      * This `route` binding can change if there's a rewrite\n      * so we keep a reference to the original requested route\n      * so we can store the cache for it and avoid re-requesting every time\n      * for shallow routing purposes.\n      */\n      let route = requestedRoute;\n\n      try {\n        var ref, ref11, ref12, ref13;\n        const handleCancelled = getCancelledHandler({\n          route,\n          router: _this\n        });\n        let existingInfo = _this.components[route];\n\n        if (routeProps.shallow && existingInfo && _this.route === route) {\n          return existingInfo;\n        }\n\n        if (hasMiddleware) {\n          existingInfo = undefined;\n        }\n\n        let cachedRouteInfo = existingInfo && !('initial' in existingInfo) && false ? 0 : undefined;\n        const isBackground = isQueryUpdating;\n        const fetchNextDataParams = {\n          dataHref: _this.pageLoader.getDataHref({\n            href: (0, _formatUrl).formatWithValidation({\n              pathname,\n              query\n            }),\n            skipInterpolation: true,\n            asPath: isNotFound ? '/404' : resolvedAs,\n            locale\n          }),\n          hasMiddleware: true,\n          isServerRender: _this.isSsr,\n          parseJSON: true,\n          inflightCache: isBackground ? _this.sbc : _this.sdc,\n          persistCache: !isPreview,\n          isPrefetch: false,\n          unstable_skipClientCache,\n          isBackground\n        };\n        let data = isQueryUpdating && !isMiddlewareRewrite ? null : yield withMiddlewareEffects({\n          fetchData: () => fetchNextData(fetchNextDataParams),\n          asPath: isNotFound ? '/404' : resolvedAs,\n          locale: locale,\n          router: _this\n        }).catch(err => {\n          // we don't hard error during query updating\n          // as it's un-necessary and doesn't need to be fatal\n          // unless it is a fallback route and the props can't\n          // be loaded\n          if (isQueryUpdating) {\n            return null;\n          }\n\n          throw err;\n        }); // when rendering error routes we don't apply middleware\n        // effects\n\n        if (data && (pathname === '/_error' || pathname === '/404')) {\n          data.effect = undefined;\n        }\n\n        if (isQueryUpdating) {\n          if (!data) {\n            data = {\n              json: self.__NEXT_DATA__.props\n            };\n          } else {\n            data.json = self.__NEXT_DATA__.props;\n          }\n        }\n\n        handleCancelled();\n\n        if ((data == null ? void 0 : (ref = data.effect) == null ? void 0 : ref.type) === 'redirect-internal' || (data == null ? void 0 : (ref11 = data.effect) == null ? void 0 : ref11.type) === 'redirect-external') {\n          return data.effect;\n        }\n\n        if ((data == null ? void 0 : (ref12 = data.effect) == null ? void 0 : ref12.type) === 'rewrite') {\n          const resolvedRoute = (0, _removeTrailingSlash).removeTrailingSlash(data.effect.resolvedHref);\n          const pages = yield _this.pageLoader.getPageList(); // during query updating the page must match although during\n          // client-transition a redirect that doesn't match a page\n          // can be returned and this should trigger a hard navigation\n          // which is valid for incremental migration\n\n          if (!isQueryUpdating || pages.includes(resolvedRoute)) {\n            route = resolvedRoute;\n            pathname = data.effect.resolvedHref;\n            query = _extends({}, query, data.effect.parsedAs.query);\n            resolvedAs = (0, _removeBasePath).removeBasePath((0, _normalizeLocalePath).normalizeLocalePath(data.effect.parsedAs.pathname, _this.locales).pathname); // Check again the cache with the new destination.\n\n            existingInfo = _this.components[route];\n\n            if (routeProps.shallow && existingInfo && _this.route === route && !hasMiddleware) {\n              // If we have a match with the current route due to rewrite,\n              // we can copy the existing information to the rewritten one.\n              // Then, we return the information along with the matched route.\n              return _extends({}, existingInfo, {\n                route\n              });\n            }\n          }\n        }\n\n        if ((0, _isApiRoute).isAPIRoute(route)) {\n          handleHardNavigation({\n            url: as,\n            router: _this\n          });\n          return new Promise(() => {});\n        }\n\n        const routeInfo = cachedRouteInfo || (yield _this.fetchComponent(route).then(res => ({\n          Component: res.page,\n          styleSheets: res.styleSheets,\n          __N_SSG: res.mod.__N_SSG,\n          __N_SSP: res.mod.__N_SSP\n        })));\n\n        if (true) {\n          const {\n            isValidElementType\n          } = __webpack_require__(/*! next/dist/compiled/react-is */ \"./node_modules/next/dist/compiled/react-is/index.js\");\n\n          if (!isValidElementType(routeInfo.Component)) {\n            throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n          }\n        }\n\n        const wasBailedPrefetch = data == null ? void 0 : (ref13 = data.response) == null ? void 0 : ref13.headers.get('x-middleware-skip');\n        const shouldFetchData = routeInfo.__N_SSG || routeInfo.__N_SSP; // For non-SSG prefetches that bailed before sending data\n        // we clear the cache to fetch full response\n\n        if (wasBailedPrefetch && (data == null ? void 0 : data.dataHref)) {\n          delete _this.sdc[data.dataHref];\n        }\n\n        const {\n          props,\n          cacheKey\n        } = yield _this._getData(_async_to_generator(function* () {\n          if (shouldFetchData) {\n            if ((data == null ? void 0 : data.json) && !wasBailedPrefetch) {\n              return {\n                cacheKey: data.cacheKey,\n                props: data.json\n              };\n            }\n\n            const dataHref = (data == null ? void 0 : data.dataHref) ? data.dataHref : _this.pageLoader.getDataHref({\n              href: (0, _formatUrl).formatWithValidation({\n                pathname,\n                query\n              }),\n              asPath: resolvedAs,\n              locale\n            });\n            const fetched = yield fetchNextData({\n              dataHref,\n              isServerRender: _this.isSsr,\n              parseJSON: true,\n              inflightCache: wasBailedPrefetch ? {} : _this.sdc,\n              persistCache: !isPreview,\n              isPrefetch: false,\n              unstable_skipClientCache\n            });\n            return {\n              cacheKey: fetched.cacheKey,\n              props: fetched.json || {}\n            };\n          }\n\n          return {\n            headers: {},\n            props: yield _this.getInitialProps(routeInfo.Component, // we provide AppTree later so this needs to be `any`\n            {\n              pathname,\n              query,\n              asPath: as,\n              locale,\n              locales: _this.locales,\n              defaultLocale: _this.defaultLocale\n            })\n          };\n        })); // Only bust the data cache for SSP routes although\n        // middleware can skip cache per request with\n        // x-middleware-cache: no-cache as well\n\n        if (routeInfo.__N_SSP && fetchNextDataParams.dataHref && cacheKey) {\n          delete _this.sdc[cacheKey];\n        } // we kick off a HEAD request in the background\n        // when a non-prefetch request is made to signal revalidation\n\n\n        if (!_this.isPreview && routeInfo.__N_SSG && false && 0) {}\n\n        props.pageProps = Object.assign({}, props.pageProps);\n        routeInfo.props = props;\n        routeInfo.route = route;\n        routeInfo.query = query;\n        routeInfo.resolvedAs = resolvedAs;\n        _this.components[route] = routeInfo;\n        return routeInfo;\n      } catch (err) {\n        return _this.handleRouteInfoError((0, _isError).getProperError(err), pathname, query, as, routeProps);\n      }\n    })();\n  }\n\n  set(state, data, resetScroll) {\n    this.state = state;\n    return this.sub(data, this.components['/_app'].Component, resetScroll);\n  }\n  /**\n  * Callback to execute before replacing router state\n  * @param cb callback to be executed\n  */\n\n\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same\n\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    } // If the urls are change, there's more than a hash change\n\n\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    } // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n\n\n    return oldHash !== newHash;\n  }\n\n  scrollToHash(as) {\n    const [, hash = ''] = as.split('#'); // Scroll to top if the hash is just `#` with no value or `#top`\n    // To mirror browsers\n\n    if (hash === '' || hash === 'top') {\n      (0, _handleSmoothScroll).handleSmoothScroll(() => window.scrollTo(0, 0));\n      return;\n    } // Decode hash to make non-latin anchor works.\n\n\n    const rawHash = decodeURIComponent(hash); // First we check if the element by id is found\n\n    const idEl = document.getElementById(rawHash);\n\n    if (idEl) {\n      (0, _handleSmoothScroll).handleSmoothScroll(() => idEl.scrollIntoView());\n      return;\n    } // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n\n\n    const nameEl = document.getElementsByName(rawHash)[0];\n\n    if (nameEl) {\n      (0, _handleSmoothScroll).handleSmoothScroll(() => nameEl.scrollIntoView());\n    }\n  }\n\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  }\n  /**\n  * Prefetch page code, you may wait for the data during page rendering.\n  * This feature only works in production!\n  * @param url the href of prefetched page\n  * @param asPath the as path of the prefetched page\n  */\n\n\n  prefetch(url) {\n    let asPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : url;\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var _this = this;\n\n    return _async_to_generator(function* () {\n      // Prefetch is not supported in development mode because it would trigger on-demand-entries\n      if (true) {\n        return;\n      }\n\n      if ( true && (0, _isBot).isBot(window.navigator.userAgent)) {\n        // No prefetches for bots that render the link since they are typically navigating\n        // links via the equivalent of a hard navigation and hence never utilize these\n        // prefetches.\n        return;\n      }\n\n      let parsed = (0, _parseRelativeUrl).parseRelativeUrl(url);\n      const urlPathname = parsed.pathname;\n      let {\n        pathname,\n        query\n      } = parsed;\n      const originalPathname = pathname;\n\n      if (false) {}\n\n      const pages = yield _this.pageLoader.getPageList();\n      let resolvedAs = asPath;\n      const locale = typeof options.locale !== 'undefined' ? options.locale || undefined : _this.locale;\n      const isMiddlewareMatch = yield matchesMiddleware({\n        asPath: asPath,\n        locale: locale,\n        router: _this\n      });\n\n      if (false) {}\n\n      parsed.pathname = resolveDynamicRoute(parsed.pathname, pages);\n\n      if ((0, _isDynamic).isDynamicRoute(parsed.pathname)) {\n        pathname = parsed.pathname;\n        parsed.pathname = pathname;\n        Object.assign(query, (0, _routeMatcher).getRouteMatcher((0, _routeRegex).getRouteRegex(parsed.pathname))((0, _parsePath).parsePath(asPath).pathname) || {});\n\n        if (!isMiddlewareMatch) {\n          url = (0, _formatUrl).formatWithValidation(parsed);\n        }\n      }\n\n      const data =  false ? 0 : yield withMiddlewareEffects({\n        fetchData: () => fetchNextData({\n          dataHref: _this.pageLoader.getDataHref({\n            href: (0, _formatUrl).formatWithValidation({\n              pathname: originalPathname,\n              query\n            }),\n            skipInterpolation: true,\n            asPath: resolvedAs,\n            locale\n          }),\n          hasMiddleware: true,\n          isServerRender: _this.isSsr,\n          parseJSON: true,\n          inflightCache: _this.sdc,\n          persistCache: !_this.isPreview,\n          isPrefetch: true\n        }),\n        asPath: asPath,\n        locale: locale,\n        router: _this\n      });\n      /**\n      * If there was a rewrite we apply the effects of the rewrite on the\n      * current parameters for the prefetch.\n      */\n\n      if ((data == null ? void 0 : data.effect.type) === 'rewrite') {\n        parsed.pathname = data.effect.resolvedHref;\n        pathname = data.effect.resolvedHref;\n        query = _extends({}, query, data.effect.parsedAs.query);\n        resolvedAs = data.effect.parsedAs.pathname;\n        url = (0, _formatUrl).formatWithValidation(parsed);\n      }\n      /**\n      * If there is a redirect to an external destination then we don't have\n      * to prefetch content as it will be unused.\n      */\n\n\n      if ((data == null ? void 0 : data.effect.type) === 'redirect-external') {\n        return;\n      }\n\n      const route = (0, _removeTrailingSlash).removeTrailingSlash(pathname);\n\n      if (yield _this._bfl(asPath, resolvedAs, options.locale, true)) {\n        _this.components[urlPathname] = {\n          __appRouter: true\n        };\n      }\n\n      yield Promise.all([_this.pageLoader._isSsg(route).then(isSsg => {\n        return isSsg ? fetchNextData({\n          dataHref: (data == null ? void 0 : data.json) ? data == null ? void 0 : data.dataHref : _this.pageLoader.getDataHref({\n            href: url,\n            asPath: resolvedAs,\n            locale: locale\n          }),\n          isServerRender: false,\n          parseJSON: true,\n          inflightCache: _this.sdc,\n          persistCache: !_this.isPreview,\n          isPrefetch: true,\n          unstable_skipClientCache: options.unstable_skipClientCache || options.priority && !!true\n        }).then(() => false).catch(() => false) : false;\n      }), _this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);\n    })();\n  }\n\n  fetchComponent(route) {\n    var _this = this;\n\n    return _async_to_generator(function* () {\n      const handleCancelled = getCancelledHandler({\n        route,\n        router: _this\n      });\n\n      try {\n        const componentResult = yield _this.pageLoader.loadPage(route);\n        handleCancelled();\n        return componentResult;\n      } catch (err) {\n        handleCancelled();\n        throw err;\n      }\n    })();\n  }\n\n  _getData(fn) {\n    let cancelled = false;\n\n    const cancel = () => {\n      cancelled = true;\n    };\n\n    this.clc = cancel;\n    return fn().then(data => {\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n\n      if (cancelled) {\n        const err = new Error('Loading initial props cancelled');\n        err.cancelled = true;\n        throw err;\n      }\n\n      return data;\n    });\n  }\n\n  _getFlightData(dataHref) {\n    // Do not cache RSC flight response since it's not a static resource\n    return fetchNextData({\n      dataHref,\n      isServerRender: true,\n      parseJSON: false,\n      inflightCache: this.sdc,\n      persistCache: false,\n      isPrefetch: false\n    }).then(_ref6 => {\n      let {\n        text\n      } = _ref6;\n      return {\n        data: text\n      };\n    });\n  }\n\n  getInitialProps(Component, ctx) {\n    const {\n      Component: App\n    } = this.components['/_app'];\n\n    const AppTree = this._wrapApp(App);\n\n    ctx.AppTree = AppTree;\n    return (0, _utils).loadGetInitialProps(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx\n    });\n  }\n\n  get route() {\n    return this.state.route;\n  }\n\n  get pathname() {\n    return this.state.pathname;\n  }\n\n  get query() {\n    return this.state.query;\n  }\n\n  get asPath() {\n    return this.state.asPath;\n  }\n\n  get locale() {\n    return this.state.locale;\n  }\n\n  get isFallback() {\n    return this.state.isFallback;\n  }\n\n  get isPreview() {\n    return this.state.isPreview;\n  }\n\n  constructor(pathname1, query1, as1, _ref7) {\n    let {\n      initialProps,\n      pageLoader,\n      App,\n      wrapApp,\n      Component,\n      err,\n      subscription,\n      isFallback,\n      locale,\n      locales,\n      defaultLocale,\n      domainLocales,\n      isPreview\n    } = _ref7;\n    // Server Data Cache (full data requests)\n    this.sdc = {}; // Server Background Cache (HEAD requests)\n\n    this.sbc = {};\n    this.isFirstPopStateEvent = true;\n    this._key = createKey();\n\n    this.onPopState = e => {\n      const {\n        isFirstPopStateEvent\n      } = this;\n      this.isFirstPopStateEvent = false;\n      const state = e.state;\n\n      if (!state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const {\n          pathname,\n          query\n        } = this;\n        this.changeState('replaceState', (0, _formatUrl).formatWithValidation({\n          pathname: (0, _addBasePath).addBasePath(pathname),\n          query\n        }), (0, _utils).getURL());\n        return;\n      } // __NA is used to identify if the history entry can be handled by the app-router.\n\n\n      if (state.__NA) {\n        window.location.reload();\n        return;\n      }\n\n      if (!state.__N) {\n        return;\n      } // Safari fires popstateevent when reopening the browser.\n\n\n      if (isFirstPopStateEvent && this.locale === state.options.locale && state.as === this.asPath) {\n        return;\n      }\n\n      let forcedScroll;\n      const {\n        url,\n        as,\n        options,\n        key\n      } = state;\n\n      if (false) {}\n\n      this._key = key;\n      const {\n        pathname\n      } = (0, _parseRelativeUrl).parseRelativeUrl(url); // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n      if (this.isSsr && as === (0, _addBasePath).addBasePath(this.asPath) && pathname === (0, _addBasePath).addBasePath(this.pathname)) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (this._bps && !this._bps(state)) {\n        return;\n      }\n\n      this.change('replaceState', url, as, Object.assign({}, options, {\n        shallow: options.shallow && this._shallow,\n        locale: options.locale || this.defaultLocale,\n        // @ts-ignore internal value not exposed on types\n        _h: 0\n      }), forcedScroll);\n    }; // represents the current component key\n\n\n    const route = (0, _removeTrailingSlash).removeTrailingSlash(pathname1); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (pathname1 !== '/_error') {\n      this.components[route] = {\n        Component,\n        initial: true,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App,\n      styleSheets: []\n    };\n\n    if (true) {\n      const {\n        BloomFilter\n      } = __webpack_require__(/*! ../../lib/bloom-filter */ \"./node_modules/next/dist/shared/lib/bloom-filter/index.js\");\n\n      const staticFilterData = {\"bitset\":{\"size\":0,\"content\":\"\"},\"hashes\":null,\"size\":0};\n      const dynamicFilterData = {\"bitset\":{\"size\":0,\"content\":\"\"},\"hashes\":null,\"size\":0};\n\n      if (staticFilterData == null ? void 0 : staticFilterData.hashes) {\n        this._bfl_s = new BloomFilter(staticFilterData.size, staticFilterData.hashes);\n\n        this._bfl_s.import(staticFilterData);\n      }\n\n      if (dynamicFilterData == null ? void 0 : dynamicFilterData.hashes) {\n        this._bfl_d = new BloomFilter(dynamicFilterData.size, dynamicFilterData.hashes);\n\n        this._bfl_d.import(dynamicFilterData);\n      }\n    } // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n\n    const autoExportDynamic = (0, _isDynamic).isDynamicRoute(pathname1) && self.__NEXT_DATA__.autoExport;\n\n    this.basePath =  false || '';\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating\n    // back from external site\n\n    this.isSsr = true;\n    this.isLocaleDomain = false;\n    this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || self.__NEXT_DATA__.appGip && !self.__NEXT_DATA__.gsp || !autoExportDynamic && !self.location.search && !false);\n\n    if (false) {}\n\n    this.state = {\n      route,\n      pathname: pathname1,\n      query: query1,\n      asPath: autoExportDynamic ? pathname1 : as1,\n      isPreview: !!isPreview,\n      locale:  false ? 0 : undefined,\n      isFallback\n    };\n    this._initialMatchesMiddlewarePromise = Promise.resolve(false);\n\n    if (true) {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (!as1.startsWith('//')) {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        const options = {\n          locale\n        };\n        const asPath = (0, _utils).getURL();\n        this._initialMatchesMiddlewarePromise = matchesMiddleware({\n          router: this,\n          locale,\n          asPath\n        }).then(matches => {\n          options._shouldResolveHref = as1 !== pathname1;\n          this.changeState('replaceState', matches ? asPath : (0, _formatUrl).formatWithValidation({\n            pathname: (0, _addBasePath).addBasePath(pathname1),\n            query: query1\n          }), asPath, options);\n          return matches;\n        });\n      }\n\n      window.addEventListener('popstate', this.onPopState); // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n\n      if (false) {}\n    }\n  }\n\n}\n\nRouter.events = (0, _mitt).default();\nexports[\"default\"] = Router;\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/router/router.js\n"));

/***/ })

});